generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id        Int       @id @default(autoincrement())
  name      String
  logoUrl   String?
  address   String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  buses     Bus[]
  students  Student[]
  users     User[]
}

model BusLocation {
  id         Int      @id @default(autoincrement())
  busId      Int
  deviceId   Int
  lat        Float
  lng        Float
  direction  Int?
  speed      Float?
  state      String?
  movement   String?
  lastUpdate DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bus        Bus      @relation(fields: [busId], references: [id])
}

model LiveLocation {
  id            Int      @id @default(autoincrement())
  vehicleReg    String   @unique
  busId         Int?
  lat           Float
  lng           Float
  direction     Float
  speed         Float?
  movementState String?
  lastUpdate    DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bus           Bus?     @relation(fields: [busId], references: [id])
}

model Notification {
  id       Int      @id @default(autoincrement())
  parentId Int
  title    String
  message  String
  type     String
  sentAt   DateTime @default(now())
  read     Boolean  @default(false)
  parent   Parent   @relation(fields: [parentId], references: [id])
}

model Parent {
  id            Int            @id @default(autoincrement())
  userId        Int?           @unique
  user          User?          @relation("UserToParent", fields: [userId], references: [id], onDelete: SetNull)
  students      Student[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model User {
  id       Int     @id @default(autoincrement())
  name     String
  email    String
  phone    String?
  role     Role
  password String
  schoolId Int?
  school   School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)

  parent Parent? @relation("UserToParent")

  driverBuses        Bus[]      @relation("DriverBus")
  assistantBuses     Bus[]      @relation("AssistantBus")
  student            Student?   @relation("UserStudent")
  assistantManifests Manifest[] @relation("AssistantManifest")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Compound uniqueness: only applies when schoolId is NOT null
  @@unique([email, schoolId])
  @@unique([phone, schoolId])
}

model Bus {
  id            Int            @id @default(autoincrement())
  name          String
  plateNumber   String         @unique
  capacity      Int
  route         String
  driverId      Int?
  assistantId   Int?
  createdAt     DateTime       @default(now())
  schoolId      Int
  updatedAt     DateTime       @updatedAt
  assistant     User?          @relation("AssistantBus", fields: [assistantId], references: [id])
  driver        User?          @relation("DriverBus", fields: [driverId], references: [id])
  school        School         @relation(fields: [schoolId], references: [id])
  locations     BusLocation[]
  liveLocations LiveLocation[]
  manifests     Manifest[]
  students      Student[]
}

model Student {
  id        Int      @id @default(autoincrement())
  name      String
  grade     String
  latitude  Float
  longitude Float
  busId     Int
  parentId  Int?
  schoolId  Int
  userId    Int?     @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bus       Bus        @relation(fields: [busId], references: [id])
  parent    Parent?    @relation(fields: [parentId], references: [id], onDelete: SetNull)
  school    School     @relation(fields: [schoolId], references: [id])
  user      User?      @relation("UserStudent", fields: [userId], references: [id])
  manifests Manifest[]
}

model Manifest {
  id          Int             @id @default(autoincrement())
  studentId   Int
  busId       Int
  assistantId Int?
  date        DateTime        @default(now())
  latitude    Float?
  longitude   Float?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  status      ManifestStatus
  session     ManifestSession @default(MORNING)

  assistant User?   @relation("AssistantManifest", fields: [assistantId], references: [id])
  bus       Bus     @relation(fields: [busId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])
}

enum Role {
  ADMIN
  DRIVER
  ASSISTANT
  PARENT
}

enum ManifestStatus {
  CHECKED_IN
  CHECKED_OUT
}

enum ManifestSession {
  MORNING
  EVENING
}
